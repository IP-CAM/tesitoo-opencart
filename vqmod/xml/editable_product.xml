<modification>
	<id><![CDATA[API Editable Product]]></id>
	<version><![CDATA[0.1]]></version>
	<vqmver><![CDATA[2.5.1]]></vqmver>
	<author><![CDATA[]]></author>
	<file path="admin/model/catalog/" name="vdi_product.php">
		<operation>
			<search position="before"><![CDATA[	public function copyProduct(]]></search>
			<add><![CDATA[
	public function editProductCoreDetails($product_id, $data) {

		if ($this->config->get('mvd_reward_points')) {
			$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', expiration_date = '" . $this->db->escape($data['expiration_date']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', points = '" . (int)$data['points'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");
		} else {
			$this->db->query("UPDATE " . DB_PREFIX . "product SET model = '" . $this->db->escape($data['model']) . "', sku = '" . $this->db->escape($data['sku']) . "', upc = '" . $this->db->escape($data['upc']) . "', ean = '" . $this->db->escape($data['ean']) . "', jan = '" . $this->db->escape($data['jan']) . "', isbn = '" . $this->db->escape($data['isbn']) . "', mpn = '" . $this->db->escape($data['mpn']) . "', location = '" . $this->db->escape($data['location']) . "', quantity = '" . (int)$data['quantity'] . "', minimum = '" . (int)$data['minimum'] . "', subtract = '" . (int)$data['subtract'] . "', stock_status_id = '" . (int)$data['stock_status_id'] . "', date_available = '" . $this->db->escape($data['date_available']) . "', expiration_date = '" . $this->db->escape($data['expiration_date']) . "', manufacturer_id = '" . (int)$data['manufacturer_id'] . "', shipping = '" . (int)$data['shipping'] . "', price = '" . (float)$data['price'] . "', weight = '" . (float)$data['weight'] . "', weight_class_id = '" . (int)$data['weight_class_id'] . "', length = '" . (float)$data['length'] . "', width = '" . (float)$data['width'] . "', height = '" . (float)$data['height'] . "', length_class_id = '" . (int)$data['length_class_id'] . "', status = '" . (int)$data['status'] . "', tax_class_id = '" . $this->db->escape($data['tax_class_id']) . "', sort_order = '" . (int)$data['sort_order'] . "', date_modified = NOW() WHERE product_id = '" . (int)$product_id . "'");
		}
	}

	public function editProductDescription($product_id, $language_id, $data) {

		$res = $this->db->query("UPDATE " . DB_PREFIX . "product_description "
		. "SET name = '" . $this->db->escape($data['name'])
		. "', description = '" . $this->db->escape($data['description'])
		. "', tag = '" . $this->db->escape($data['tag'])
		. "', meta_title = '" . $this->db->escape($data['meta_title'])
		. "', meta_description = '" . $this->db->escape($data['meta_description'])
		. "', meta_keyword = '" . $this->db->escape($data['meta_keyword'])
		. "' WHERE product_id = '" . (int)$product_id
		. "' AND language_id = '" . (int)$language_id . "'");
	}

	public function editProductCategories($product_id, $data) {
		$this->db->query("DELETE FROM " . DB_PREFIX
			. "product_to_category WHERE product_id = '" . (int)$product_id . "'");

		if (isset($data['product_category'])) {
			foreach ($data['product_category'] as $category_id) {
				$this->db->query("INSERT INTO " . DB_PREFIX . "product_to_category SET product_id = '" . (int)$product_id . "', category_id = '" . (int)$category_id . "'");
			}
		}
	}

	public function setMainProductImage($product_id, $imgFile) {
		if (isset($imgFile)) {
			$this->db->query("UPDATE " . DB_PREFIX . "product SET image = '"
			. $this->db->escape($imgFile) . "' WHERE product_id = '" . (int)$product_id . "'");
		}
	}

	public function addAuxProductImage($product_id, $sort_order, $imgFile) {
		if (isset($imgFile)) {
			$this->db->query("INSERT INTO " . DB_PREFIX . "product_image SET product_id = '"
			. (int)$product_id . "', image = '" . $this->db->escape($imgFile) .
			"', sort_order = '" . (int)$sort_order . "'");
		}
	}

	public function removeAuxProductImage($product_id, $imgFile) {
		if (isset($imgFile)) {
			$res = $this->db->query("DELETE FROM `" . DB_PREFIX . "product_image` WHERE product_id ='" . (int)$product_id . "' AND image = '" . $imgFile . "'");
		}
	}

	public function isImageInUse($imgFile) {
		if (isset($imgFile)) {
			//search in main - if find any, return true
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX .
				"product WHERE image = '" . $imgFile . "'");
			if (0 < count($query->rows)) {
				return true;
			}

			//search in aux - if find any, return true
			$query = $this->db->query("SELECT * FROM " . DB_PREFIX .
				"product_image WHERE image = '" . $imgFile . "'");
			if (0 < count($query->rows)) {
				return true;
			}
		}

		return false;
	}
]]></add>
		</operation>
	</file>
</modification>
