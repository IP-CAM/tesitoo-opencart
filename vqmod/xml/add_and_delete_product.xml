<modification>
	<id><![CDATA[Add and Delete Product]]></id>
	<version><![CDATA[0.1]]></version>
	<vqmver><![CDATA[2.5.1]]></vqmver>
	<author><![CDATA[]]></author>
	<file path="catalog/language/english/product/" name="product.php">
		<operation>
			<search position="after"><![CDATA[$_['text_brand']               = 'Brand';]]></search>
			<add><![CDATA[$_['text_vendor']              = 'Vendor';]]></add>
		</operation>
	</file>
	<file path="catalog/language/english/product/" name="product.php">
		<operation>
			<search position="before"><![CDATA[$_['text_related']             = 'Related Products';]]></search>
			<add><![CDATA[$_['text_success_new']         = 'New product added. It has been submitted to the webmaster for approval.';]]></add>
		</operation>
	</file>
	<file path="catalog/language/english/product/" name="product.php">
		<operation>
			<search position="bottom"></search>
			<add><![CDATA[
$_['error_prodname']           = 'Warning: Product name must be between 3 and 65 characters!';
$_['error_price']              = 'Warning: Price must be a number greater than 0.';
$_['error_quantity']           = 'Warning: Quantity must be a number greater than or equal to 0.';
$_['error_not_logged_in']      = 'Warning: User not logged in!';
]]></add>
		</operation>
	</file>
	<file path="catalog/controller/product/" name="product.php,product_tesitoo_api.php">
		<operation>
			<search position="bottom" offset="2"></search>
			<add><![CDATA[

	public function addNew()
	{
		$this->load->language('product/product');
		$json = array();

		if ($this->request->server['REQUEST_METHOD'] == 'POST') {
			//// input validation ////

			if(!$this->user->isLogged()) {
				$json['error'] = $this->language->get('error_not_logged_in');
			}

			if ((utf8_strlen($this->request->post['name']) < 3) ||
				(utf8_strlen($this->request->post['name']) > 65)) {
				$json['error'] = $this->language->get('error_prodname');
			}

			if (($this->request->post['price']) <= 0) {
				$json['error'] = $this->language->get('error_price');
			}

			if (($this->request->post['quantity']) < 0) {
				$json['error'] = $this->language->get('error_quantity');
			}

			if ((null !== $this->request->post['expiration_date'])
                && ("" !== $this->request->post['expiration_date'])) {
                $expDate = DateTime::createFromFormat('Y-m-d H:i:s', $this->request->post['expiration_date']);
                if (!$expDate) {
                    $json['error'] = $this->language->get('error_date_fmt');
                }
            }

			if (!isset($json['error'])) {
				$this->load->model('catalog/vdi_product');

				$product_id = $this->model_catalog_vdi_product
								->addProduct($this->request->post);

				$json['success'] = $this->language->get('text_success_new');

				$json['product_id'] = $product_id;
			}
		}

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}

	public function delete()
	{
		$this->load->language('product/product');
		$json = array();

		if ($this->request->server['REQUEST_METHOD'] == 'DELETE') {
			if(!$this->user->isLogged()) {
				$json['error'] = $this->language->get('error_not_logged_in');
			}

			if (!isset($json['error'])) {
				$this->load->model('catalog/vdi_product');

				$product_id = $this->model_catalog_vdi_product
								->deleteProduct($this->request->post['key']);

				$json['success'] = true;
			}
		}

		$this->response->addHeader('Content-Type: application/json');
		$this->response->setOutput(json_encode($json));
	}]]></add>
		</operation>
	</file>


</modification>
